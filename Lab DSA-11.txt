*Lab DSA-11

*Assignment-1 :

package DSADemo;

import java.util.Scanner;
import java.util.Stack;

public class PalindromeChecker {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();

        
        String cleanedInput = input.replaceAll("\\s+", "").toLowerCase();

        Stack<Character> stack = new Stack<>();

       
        for (int i = 0; i < cleanedInput.length(); i++) {
            stack.push(cleanedInput.charAt(i));
        }

        
        boolean isPalindrome = true;
        for (int i = 0; i < cleanedInput.length(); i++) {
            if (cleanedInput.charAt(i) != stack.pop()) {
                isPalindrome = false;
                break;
            }
        }

        
        if (isPalindrome) {
            System.out.println("\"" + input + "\" is a palindrome.");
        } else {
            System.out.println("\"" + input + "\" is not a palindrome.");
        }

        scanner.close();
    }
}


* Assignment-2 :

package DSADemo;

import java.util.Stack;

public class MinStack {
    private Stack<Integer> mainStack;
    private Stack<Integer> minStack;

    
    public MinStack() {
        mainStack = new Stack<>();
        minStack = new Stack<>();
    }

    
    public void push(int x) {
        mainStack.push(x);

       
        if (minStack.isEmpty() || x <= minStack.peek()) {
            minStack.push(x);
        }
    }

    
    public int pop() {
        if (mainStack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }

        int removed = mainStack.pop();
        if (removed == minStack.peek()) {
            minStack.pop();
        }
        return removed;
    }

    
    public int top() {
        if (mainStack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return mainStack.peek();
    }

   
    public boolean isEmpty() {
        return mainStack.isEmpty();
    }

    
    public int getMin() {
        if (minStack.isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return minStack.peek();
    }

    
    public void printStack() {
        System.out.println("Stack: " + mainStack);
        System.out.println("Min Stack: " + minStack);
    }

    
    public static void main(String[] args) {
        MinStack stack = new MinStack();

        stack.push(11);
        stack.push(45);
        stack.push(67);
        stack.push(89);

        stack.printStack();

        System.out.println("Peek: " + stack.top());     // 89
        System.out.println("Min: " + stack.getMin());   // 11
    }
}
