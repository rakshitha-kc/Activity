*DSA Lab-12 :

* Assignment-1 :

package LinkedListDemo;

public class SinglyLinkedList {
    
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node head;

    
    public void add(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
    }

    
    public void reverse() {
        Node prev = null;
        Node current = head;
        Node next = null;

        while (current != null) {
            next = current.next;  
            current.next = prev; 
            prev = current;       
            current = next;
        }

        head = prev;  
    }

    
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    
    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();

        list.add(10);
        list.add(20);
        list.add(30);
        list.add(40);

        System.out.println("Original List:");
        list.printList();

        list.reverse();

        System.out.println("Reversed List:");
        list.printList();
    }
}


* Assignment - 2 :

package LinkedListDemo;

public class SinglyLinkedList {
    static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node head;

    
    public void add(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
    }

    
    public void appendList(SinglyLinkedList otherList) {
        if (otherList == null || otherList.head == null) {
            return; // nothing to append
        }

        if (this.head == null) {
            
            this.head = otherList.head;
            return;
        }

        
        Node current = this.head;
        while (current.next != null) {
            current = current.next;
        }

       
        current.next = otherList.head;
    }

   
    public void printList() {
        Node current = head;

        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }

        System.out.println();
    }

   
    public static void main(String[] args) {
        SinglyLinkedList list1 = new SinglyLinkedList();
        list1.add(22);
        list1.add(33);
        list1.add(44);
        list1.add(55);

        SinglyLinkedList list2 = new SinglyLinkedList();
        list2.add(66);
        list2.add(77);
        list2.add(88);
        list2.add(99);

        System.out.println("List1 before append:");
        list1.printList();

        System.out.println("List2:");
        list2.printList();

        list1.appendList(list2);

        System.out.println("List1 after append:");
        list1.printList();
    }
}



